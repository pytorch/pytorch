name: Setup Windows

description: Set up for windows jobs

inputs:
  cuda-version:
    description: which cuda version to install, 'cpu' for none
    required: true
  python-version:
    required: false
    type: string
    default: "3.10"
    description: |
      The python version to be used. Will be 3.10 by default

runs:
  using: composite
  steps:
    - name: Display EC2 information
      shell: bash
      run: |
        set -euo pipefail
        function get_ec2_metadata() {
          # Pulled from instance metadata endpoint for EC2
          # see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html
          category=$1
          curl -H "X-aws-ec2-metadata-token: $(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 30")" -fsSL "http://169.254.169.254/latest/meta-data/${category}"
        }
        echo "ami-id: $(get_ec2_metadata ami-id)"
        echo "instance-id: $(get_ec2_metadata instance-id)"
        echo "instance-type: $(get_ec2_metadata instance-type)"
        echo "system info $(uname -a)"

    # Needed for binary builds, see: https://github.com/pytorch/pytorch/issues/73339#issuecomment-1058981560
    - name: Enable long paths on Windows
      shell: powershell
      run: |
        Set-ItemProperty -Path "HKLM:\\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1

    - name: Setup Python3
      env:
          PYTHON_VERSION: ${{ inputs.python-version }}
      shell: bash
      run: |
        set +e
        set -x
        export DESIRED_PYTHON=3.10
        echo "DESIRED_PYTHON=3.10" | tee -a "${GITHUB_ENV}"
        .ci/pytorch/windows/internal/install_python.bat
        echo "PATH=$(pwd)/Python/Scripts;$(pwd)/Python;$(pwd);/usr/bin/;${PATH}" | tee -a "${GITHUB_ENV}"
        echo "PYTHON_PATH=$(pwd)/Python" | tee -a "${GITHUB_ENV}"
        ln -s "$(pwd)/Python/python.exe" "$(pwd)/Python/python3.exe"

    - name: Get temporary directory used by Windows Python
      shell: bash
      run: |
        TMPDIR=$(python -c 'import tempfile; print(tempfile.gettempdir());')
        echo "TMPDIR=${TMPDIR}" >> "${GITHUB_ENV}"

    # Since it's just a defensive command, the workflow should continue even the command fails. This step can be
    # removed once Windows Defender is removed from the AMI
    - name: Disables Windows Defender scheduled and real-time scanning for files in directories used by PyTorch
      continue-on-error: true
      shell: powershell
      run: |
        Set-Alias -Name python3 -Value python
        Add-MpPreference -ExclusionPath $(Get-Location).tostring(),$Env:TMPDIR,"C:\Jenkins\Miniconda3" -ErrorAction Ignore
        # Let's both exclude the path and disable Windows Defender completely just to be sure
        # that it doesn't interfere
        Set-MpPreference -DisableRealtimeMonitoring $True -ErrorAction Ignore

    - name: Install sysinternals handle tool
      continue-on-error: true
      shell: powershell
      run: |
        choco install handle -y
        handle C:\actions-runner\_work\
