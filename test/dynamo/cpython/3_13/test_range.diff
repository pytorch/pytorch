diff --git a/test/dynamo/cpython/3_13/test_range.py b/test/dynamo/cpython/3_13/test_range.py
index 3870b153688..5a6a2caa89a 100644
--- a/test/dynamo/cpython/3_13/test_range.py
+++ b/test/dynamo/cpython/3_13/test_range.py
@@ -1,3 +1,23 @@
+# ======= BEGIN Dynamo patch =======
+# Owner(s): ["module: dynamo"]
+
+# ruff: noqa
+# flake8: noqa
+
+# Test copied from
+# https://raw.githubusercontent.com/python/cpython/refs/tags/v3.13.5/Lib/test/test_range.py
+
+import sys
+import torch
+import torch._dynamo.test_case
+import unittest
+from torch._dynamo.test_case import CPythonTestCase
+from torch.testing._internal.common_utils import run_tests, skipIfTorchDynamo
+
+__TestCase = CPythonTestCase
+
+# ======= END DYNAMO PATCH =======
+
 # Python test set -- built-in functions
 
 import unittest
@@ -21,7 +41,7 @@ def pyrange_reversed(start, stop, step):
     return pyrange(stop - step, start - step, -step)
 
 
-class RangeTest(unittest.TestCase):
+class RangeTest(__TestCase):
     def assert_iterators_equal(self, xs, ys, test_id, limit=None):
         # check that an iterator xs matches the expected results ys,
         # up to a given limit.
@@ -160,6 +180,7 @@ class RangeTest(unittest.TestCase):
         self.assertEqual(seq[0], -a)
         self.assertEqual(seq[-1], -a-c)
 
+    @skipIfTorchDynamo("slow test")  # re-enable once Dynamo implements range_iterator
     def test_large_range(self):
         # Check long ranges (len > sys.maxsize)
         # len() is expected to fail due to limitations of the __len__ protocol
@@ -403,6 +424,7 @@ class RangeTest(unittest.TestCase):
                     it = pickle.loads(d)
                     self.assertEqual(list(it), data[1:])
 
+    @skipIfTorchDynamo("infinite loop")
     def test_iterator_pickling_overflowing_index(self):
         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
             with self.subTest(proto=proto):
@@ -725,4 +747,4 @@ class RangeTest(unittest.TestCase):
             del rangeobj.step
 
 if __name__ == "__main__":
-    unittest.main()
+    run_tests()
