diff --git a/test/dynamo/cpython/3_13/test_raise.py b/test/dynamo/cpython/3_13/test_raise.py
index 6d26a61bee4..ce748433d28 100644
--- a/test/dynamo/cpython/3_13/test_raise.py
+++ b/test/dynamo/cpython/3_13/test_raise.py
@@ -1,3 +1,58 @@
+# ======= BEGIN Dynamo patch =======
+# Owner(s): ["module: dynamo"]
+
+# ruff: noqa
+# flake8: noqa
+
+# Test copied from
+# https://raw.githubusercontent.com/python/cpython/refs/tags/v3.13.5/Lib/test/test_raise.py
+
+import sys
+import torch
+import torch._dynamo.test_case
+import unittest
+from torch._dynamo.test_case import CPythonTestCase
+from torch.testing._internal.common_utils import (
+    run_tests,
+)
+
+__TestCase = CPythonTestCase
+
+# redirect import statements
+import sys
+import importlib.abc
+
+redirect_imports = (
+    "test.mapping_tests",
+    "test.typinganndata",
+    "test.test_grammar",
+    "test.test_math",
+    "test.test_iter",
+    "test.typinganndata.ann_module",
+)
+
+class RedirectImportFinder(importlib.abc.MetaPathFinder):
+    def find_spec(self, fullname, path, target=None):
+        # Check if the import is the problematic one
+        if fullname in redirect_imports:
+            try:
+                # Attempt to import the standalone module
+                name = fullname.removeprefix("test.")
+                r = importlib.import_module(name)
+                # Redirect the module in sys.modules
+                sys.modules[fullname] = r
+                # Return a module spec from the found module
+                return importlib.util.find_spec(name)
+            except ImportError:
+                return None
+        return None
+
+# Add the custom finder to sys.meta_path
+sys.meta_path.insert(0, RedirectImportFinder())
+
+
+# ======= END DYNAMO PATCH =======
+
 # Copyright 2007 Google, Inc. All Rights Reserved.
 # Licensed to PSF under a Contributor Agreement.
 
@@ -23,7 +78,7 @@ class Context:
         return True
 
 
-class TestRaise(unittest.TestCase):
+class TestRaise(__TestCase):
     def test_invalid_reraise(self):
         try:
             raise
@@ -120,9 +175,10 @@ class TestRaise(unittest.TestCase):
         self.assertRaises(StopIteration, lambda: next(g))
 
     def test_erroneous_exception(self):
-        class MyException(Exception):
-            def __init__(self):
-                raise RuntimeError()
+        with torch._dynamo.error_on_graph_break(False):
+            class MyException(Exception):
+                def __init__(self):
+                    raise RuntimeError()
 
         try:
             raise MyException
@@ -133,9 +189,10 @@ class TestRaise(unittest.TestCase):
 
     def test_new_returns_invalid_instance(self):
         # See issue #11627.
-        class MyException(Exception):
-            def __new__(cls, *args):
-                return object()
+        with torch._dynamo.error_on_graph_break(False):
+            class MyException(Exception):
+                def __new__(cls, *args):
+                    return object()
 
         with self.assertRaises(TypeError):
             raise MyException
@@ -148,7 +205,7 @@ class TestRaise(unittest.TestCase):
 
 
 
-class TestCause(unittest.TestCase):
+class TestCause(__TestCase):
 
     def testCauseSyntax(self):
         try:
@@ -186,10 +243,11 @@ class TestCause(unittest.TestCase):
             self.fail("No exception raised")
 
     def test_class_cause_nonexception_result(self):
-        class ConstructsNone(BaseException):
-            @classmethod
-            def __new__(*args, **kwargs):
-                return None
+        with torch._dynamo.error_on_graph_break(False):
+            class ConstructsNone(BaseException):
+                @classmethod
+                def __new__(*args, **kwargs):
+                    return None
         try:
             raise IndexError from ConstructsNone
         except TypeError as e:
@@ -209,9 +267,10 @@ class TestCause(unittest.TestCase):
             self.fail("No exception raised")
 
     def test_erroneous_cause(self):
-        class MyException(Exception):
-            def __init__(self):
-                raise RuntimeError()
+        with torch._dynamo.error_on_graph_break(False):
+            class MyException(Exception):
+                def __init__(self):
+                    raise RuntimeError()
 
         try:
             raise IndexError from MyException
@@ -221,7 +280,7 @@ class TestCause(unittest.TestCase):
             self.fail("No exception raised")
 
 
-class TestTraceback(unittest.TestCase):
+class TestTraceback(__TestCase):
 
     def test_sets_traceback(self):
         try:
@@ -242,7 +301,7 @@ class TestTraceback(unittest.TestCase):
             self.fail("No exception raised")
 
 
-class TestTracebackType(unittest.TestCase):
+class TestTracebackType(__TestCase):
 
     def raiser(self):
         raise ValueError
@@ -308,7 +367,7 @@ class TestTracebackType(unittest.TestCase):
             types.TracebackType(other_tb, frame, 1, "nuh-uh")
 
 
-class TestContext(unittest.TestCase):
+class TestContext(__TestCase):
     def test_instance_context_instance_raise(self):
         context = IndexError()
         try:
@@ -392,11 +451,12 @@ class TestContext(unittest.TestCase):
             self.fail("No exception raised")
 
     def test_context_manager(self):
-        class ContextManager:
-            def __enter__(self):
-                pass
-            def __exit__(self, t, v, tb):
-                xyzzy
+        with torch._dynamo.error_on_graph_break(False):
+            class ContextManager:
+                def __enter__(self):
+                    pass
+                def __exit__(self, t, v, tb):
+                    xyzzy
         try:
             with ContextManager():
                 1/0
@@ -471,12 +531,13 @@ class TestContext(unittest.TestCase):
         import gc
         # A re-raised exception in a __del__ caused the __context__
         # to be cleared
-        class C:
-            def __del__(self):
-                try:
-                    1/0
-                except:
-                    raise
+        with torch._dynamo.error_on_graph_break(False):
+            class C:
+                def __del__(self):
+                    try:
+                        1/0
+                    except:
+                        raise
 
         def f():
             x = C()
@@ -498,7 +559,7 @@ class TestContext(unittest.TestCase):
             self.assertEqual(ZeroDivisionError, cm.unraisable.exc_type)
 
 
-class TestRemovedFunctionality(unittest.TestCase):
+class TestRemovedFunctionality(__TestCase):
     def test_tuples(self):
         try:
             raise (IndexError, KeyError) # This should be a tuple!
@@ -517,4 +578,4 @@ class TestRemovedFunctionality(unittest.TestCase):
 
 
 if __name__ == "__main__":
-    unittest.main()
+    run_tests()
